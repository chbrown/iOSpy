#!/usr/bin/env bash

set -e # exit immediately on error

usage() {
  >&2 cat <<HELP
Usage: $(basename "$0") [UDID] [--domains] [--files] [--rebuild domain] [-h|--help]

If the MobileSync/Backup directory contains only one backup,
the UDID argument is optional.

Actions:
  --domains  Print the unique domains listed in Manifest.db
  --files    Read the Manifest.db for the specified device backup
             and print a list of files in CSV format
  --rebuild  Recreate the file structure for the specified domain
             into a new folder in the current directory

Examples:
  $(basename "$0") --files | mlr --icsv --opprint cat
  $(basename "$0") --rebuild AppDomain-com.myapp
HELP
}

ACTIONS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    [0-9A-Ea-e]*)
      # TODO: throw on repeats
      UDID=$1
      ;;
    --domains)
      ACTIONS+=(domains)
      ;;
    --files)
      ACTIONS+=(files)
      ;;
    --rebuild)
      ACTIONS+=(rebuild)
      shift
      DOMAIN=$1
      ;;
  esac
  shift
done

if [[ -z ${UDID+missing} ]]; then
  # try to infer UDID based on available backups
  UDIDDIRs=("$HOME/Library/Application Support/MobileSync/Backup/"[0-9A-Ea-e]*)
  if [[ ${#UDIDDIRs[@]} == 1 ]]; then
    UDIDDIR=${UDIDDIRs[0]}
  else
    >&2 printf 'UDID was not provided and cannot be inferred from Backup directory; exiting\n'
    exit 66 # EX_NOINPUT
  fi
else
  UDIDDIR=$UDIDDIR/$UDID
fi

>&2 printf 'Using UDIDDIR="%s"\n' "$UDIDDIR"

domains() {
  sqlite3 -csv -header "$UDIDDIR/Manifest.db" \
    'SELECT domain FROM Files GROUP BY domain ORDER BY domain ASC'
}

files() {
  sqlite3 -csv -header "$UDIDDIR/Manifest.db" \
    'SELECT fileID, domain, relativePath FROM Files ORDER BY domain, relativePath ASC'
}

_copy() {
  # Usage: _copy relativePath
  shasum=$(printf "%s-%s" "$DOMAIN" "$1" | shasum | awk '{print $1}')
  prefix=${shasum:0:2}
  # set up original & destination paths; if original exists, copy it over to destination
  original=$UDIDDIR/$prefix/$shasum
  destination=$DOMAIN/$1
  if [[ -e "$original" ]]; then
    mkdir -p "$(dirname "$destination")"
    cp "$original" "$destination"
    >&2 printf 'Copied "%s" -> "%s"\n' "$original" "$destination"
  else
    >&2 printf 'Skipping missing file "%s" (%s)\n' "$1" "$shasum"
  fi
}

rebuild() {
  while read -r relativePath; do
    _copy "$relativePath"
  done < <(sqlite3 "$UDIDDIR/Manifest.db" "SELECT relativePath FROM Files WHERE domain = '$DOMAIN'")
}

for ACTION in "${ACTIONS[@]}"; do
  $ACTION
done
